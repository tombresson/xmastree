/*
 *      Copyright 2017 Particle Industries, Inc.
 *
 *      Licensed under the Apache License, Version 2.0 (the "License");
 *      you may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 *
 */

#define SONG_COUNT                          7

#define SONG_JOYTOTHEWORLD                  0
#define SONG_WEWHISHYOUAMERRYXMAS           1
#define SONG_RUDOLFTHEREDNOSEDREINDEER      2
#define SONG_JINGLEBELLS                    3
#define SONG_SILENTNIGHT                    4
#define SONG_ROCKINGAROUND                  5
#define SONG_CAROLOFTHEBELLS                6

#define   Do        523/2
#define  Do_        1046/2
#define   Re        587/2
#define  Re_        1175/2
#define   Mi        659/2
#define  Mi_        1318/2
#define   Fa        698/2
#define  Fa_        1397/2
#define   So        784/2
#define   La        880/2
#define   Si        988/2
#define  _Si        494/2
#define  _La        440/2
#define  _So        392/2

#define   bt        323
#define   bt2       bt*2
#define   bt3       bt*3
#define   bt6       bt*6
#define   bt1_2     bt/2
#define   bt3_2     (bt/2)*3
#define   bt1_4     bt/4

#define ARRAY_SIZE(x) ((sizeof x) / (sizeof *x))

/*
 *      Credit:
 *          Midi to Arduino Converter
 *              - Andy Tran (extramaster), 2015
 *          https://www.extramaster.net/tools/midiToArduino/
 *
 *      The songs are generated from:
 *          https://www.extramaster.net/tools/midiToArduino/processFile/?url=http://www.jump-gate.com/christmas/music/midi/joyworld.mid&track=1
 *          https://www.extramaster.net/tools/midiToArduino/processFile/?url=http://www.jump-gate.com/christmas/music/midi/wewishu2.mid&track=3
 *          https://www.extramaster.net/tools/midiToArduino/processFile/?url=http://www.jump-gate.com/christmas/music/midi/rudolf.mid&track=1
 *          https://www.extramaster.net/tools/midiToArduino/processFile/?url=http://www.jump-gate.com/christmas/music/midi/jingbell.mid&track=1
 */

/* Song List */
String songList = "Joy To The World, We Wish You A Merry Xmas, Rudolf the Red Nosed Reindeer, Jingle Bells, Silent Night, Rocking Around The Xmas Tree, Carol of the Bells";

/* An indicator to exit the current song */
bool changeSong = false;

bool delaySong(unsigned duration)
{
    while (duration > 0 && !changeSong) {
        unsigned thisDelay = duration > 100 ? 100 : duration;
        delay(thisDelay);
        duration -= thisDelay;
    }

    return changeSong;
}

/*
 *
 *      Silent Night
 *
 *      More Information:
 *          https://en.wikipedia.org/wiki/Silent_Night
 *
 */

// Divided by 3 due to song format (Note, Duration)
#define NOTE_COUNT_SILENTNIGHT   (ARRAY_SIZE(notes_silentNight) / 2)

const int notes_silentNight[] = {
    // Note, Duration
    So, bt3_2,
    La, bt1_2,
    So, bt,
    Mi, bt3,

    So, bt3_2,
    La, bt1_2,
    So, bt,
    Mi, bt3,

    Re_, bt2,
    Re_, bt1_2,
    Si, bt3,

    Do_, bt2,
    Do_, bt1_2,
    So, bt3,

    La, bt2,
    La, bt,
    Do_, bt3_2,
    Si, bt1_2,
    La, bt,
    So, bt3_2,
    La, bt1_2,
    So, bt,
    Mi, bt3,

    La, bt2,
    La, bt,
    Do_, bt3_2,
    Si, bt1_2,
    La, bt,
    So, bt3_2,
    La, bt1_2,
    So, bt,
    Mi, bt3,

    Re_, bt2,
    Re_, bt,
    Fa_, bt3_2,
    Re_, bt1_2,
    Si, bt,
    Do_, bt3,

    Mi_, bt3,
    Do_, bt,
    So, bt,
    Mi, bt,
    So, bt3_2,
    Fa, bt1_2,
    Re, bt,
    Do, bt6
};

/*
 *
 *      Joy To The World
 *
 *      More information:
 *          https://en.wikipedia.org/wiki/Joy_to_the_World
 *
 */

// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_JOYTOTHEWORLD   (ARRAY_SIZE(notes_joyToTheWorld) / 3)

const float notes_joyToTheWorld[] = {
    // Note, Duration, Delay
    587, 450.0, 500,
    554, 337.5, 375,
    493, 112.5, 125,
    440, 675.0, 750,
    391, 225.0, 250,
    369, 450.0, 500,
    329, 450.0, 500,
    293, 675.0, 750.0,
    440, 225.0, 250.0,
    493, 670.3125, 744.791666667 + 5.20833333333,
    493, 225.0, 250.0,
    554, 670.3125, 744.791666667 + 5.20833333333,
    554, 225.0, 250.0,
    587, 670.3125, 744.791666667 + 5.20833333333,
    587, 220.3125, 244.791666667 + 5.20833333333,
    587, 225.0, 250.0,
    554, 225.0, 250.0,
    493, 225.0, 250.0,
    440, 220.3125, 244.791666667 + 5.20833333333,
    440, 337.5, 375.0,
    391, 112.5, 125.0,
    369, 225.0, 250.0,
    587, 220.3125, 244.791666667 + 5.20833333333,
    587, 225.0, 250.0,
    554, 225.0, 250.0,
    493, 225.0, 250.0,
    440, 220.3125, 244.791666667 + 5.20833333333,
    440, 337.5, 375.0,
    391, 112.5, 125.0,
    369, 220.3125, 244.791666667 + 5.20833333333,
    369, 220.3125, 244.791666667 + 5.20833333333,
    369, 220.3125, 244.791666667 + 5.20833333333,
    369, 220.3125, 244.791666667 + 5.20833333333,
    369, 220.3125, 244.791666667 + 5.20833333333,
    369, 112.5, 125.0,
    391, 112.5, 125.0,
    440, 675.0, 750.0,
    391, 112.5, 125.0,
    369, 112.5, 125.0,
    329, 220.3125, 244.791666667 + 5.20833333333,
    329, 220.3125, 244.791666667 + 5.20833333333,
    329, 220.3125, 244.791666667 + 5.20833333333,
    329, 112.5, 125.0,
    369, 112.5, 125.0,
    391, 675.0, 750.0,
    369, 112.5, 125.0,
    329, 112.5, 125.0,
    293, 225.0, 250.0,
    587, 450.0, 500.0,
    493, 225.0, 250.0,
    440, 337.5, 375.0,
    391, 112.5, 125.0,
    369, 225.0, 250.0,
    391, 225.0, 250.0,
    369, 450.0, 500.0,
    329, 450.0, 500.0,
    293, 450.0, 500.0,
};


/*
 *
 *      We Wish You A Merry X'mas
 *
 *      More information:
 *          https://en.wikipedia.org/wiki/We_Wish_You_a_Merry_Christmas
 *
 */

// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_WEWISHYOUAMERRYXMAS   (ARRAY_SIZE(notes_weWishYouAMerryXmas) / 3)

const float notes_weWishYouAMerryXmas[] = {
    // Note, Duration, Delay
    311, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    415, 156.24975, 173.610833333,
    466, 156.24975, 173.610833333,
    415, 156.24975, 173.610833333,
    391, 156.24975, 173.610833333,
    349, 312.4995, 347.221666667,
    349, 234.374625, 260.41625 + 86.8054166667,
    349, 312.4995, 347.221666667,
    466, 312.4995, 347.221666667,
    466, 156.24975, 173.610833333,
    523, 156.24975, 173.610833333,
    466, 156.24975, 173.610833333,
    415, 156.24975, 173.610833333,
    391, 312.4995, 347.221666667,
    311, 234.374625, 260.41625 + 86.8054166667,
    311, 312.4995, 347.221666667,
    523, 312.4995, 347.221666667,
    523, 156.24975, 173.610833333,
    554, 156.24975, 173.610833333,
    523, 156.24975, 173.610833333,
    466, 156.24975, 173.610833333,
    415, 312.4995, 347.221666667,
    349, 234.374625, 260.41625 + 86.8054166667,
    311, 156.24975, 173.610833333,
    311, 156.24975, 173.610833333,
    349, 234.374625, 260.41625 + 86.8054166667,
    466, 234.374625, 260.41625 + 86.8054166667,
    391, 234.374625, 260.41625 + 86.8054166667,
    415, 546.874125, 607.637916667 + 86.8054166667,
    311, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    391, 624.999, 694.443333333,
    391, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    391, 312.4995, 347.221666667,
    349, 312.4995, 347.221666667,
    311, 546.874125, 607.637916667 + 86.8054166667,
    466, 312.4995, 347.221666667,
    523, 312.4995, 347.221666667,
    466, 312.4995, 347.221666667,
    415, 312.4995, 347.221666667,
    622, 312.4995, 347.221666667,
    311, 312.4995, 347.221666667,
    311, 156.24975, 173.610833333,
    311, 156.24975, 173.610833333,
    349, 234.374625, 260.41625 + 86.8054166667,
    466, 234.374625, 260.41625 + 86.8054166667,
    391, 234.374625, 260.41625 + 86.8054166667,
    415, 546.874125, 607.637916667,
};

/*
 *
 *      Rudolf The Red Nosed Reindeer
 *
 *      More Information:
 *          https://en.wikipedia.org/wiki/Rudolph_the_Red-Nosed_Reindeer_(song)
 *
 */

// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_RUDOLFTHEREDNOSEDREINDEER   (ARRAY_SIZE(notes_rudolfTheRedNosedReindeer) / 3)

const float notes_rudolfTheRedNosedReindeer[] = {
    // Note, Duration, Delay
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    329, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    493, 1294.962, 1438.84666667,
    349, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    349, 323.7405, 359.711666667,
    293, 323.7405, 359.711666667,
    493, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    329, 1294.962, 1438.84666667,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    329, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    493, 1294.962, 1438.84666667,
    349, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    349, 323.7405, 359.711666667,
    293, 323.7405, 359.711666667,
    493, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    587, 323.7405, 359.711666667,
    523, 1294.962, 1438.84666667,
    440, 320.368203125, 355.964670139 + 3.74699652778,
    440, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 323.7405, 359.711666667,
    329, 323.7405, 359.711666667,
    391, 647.481, 719.423333333,
    349, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 323.7405, 359.711666667,
    349, 323.7405, 359.711666667,
    329, 1294.962, 1438.84666667,
    293, 323.7405, 359.711666667,
    329, 323.7405, 359.711666667,
    391, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    493, 320.368203125, 355.964670139 + 3.74699652778,
    493, 320.368203125, 355.964670139 + 3.74699652778,
    493, 647.481, 719.423333333,
    523, 320.368203125, 355.964670139 + 3.74699652778,
    523, 323.7405, 359.711666667,
    493, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 323.7405, 359.711666667,
    349, 161.87025, 179.855833333,
    293, 809.35125, 899.279166667,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    329, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    523, 323.7405, 359.711666667,
    493, 1294.962, 1438.84666667,
    349, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    349, 323.7405, 359.711666667,
    293, 323.7405, 359.711666667,
    493, 323.7405, 359.711666667,
    440, 323.7405, 359.711666667,
    391, 967.849203125, 1075.38800347 + 3.74699652778,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 161.87025, 179.855833333,
    440, 161.87025, 179.855833333,
    391, 323.7405, 359.711666667,
    587, 323.7405, 359.711666667,
    523, 971.2215, 359.711666667,
};


/*
 *
 *      Jingle Bells
 *
 *      More information:
 *        https://en.wikipedia.org/wiki/Jingle_Bells
 *
 */

// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_JINGLEBELLS   (ARRAY_SIZE(notes_jingleBells) / 3)

const float notes_jingleBells[] = {
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 416.6655, 462.961666667,
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 416.6655, 462.961666667,
    493, 208.33275, 231.480833333,
    587, 208.33275, 231.480833333,
    391, 312.499125, 347.22125,
    440, 104.166375, 115.740416667,
    493, 833.331, 925.923333333,
    523, 208.33275, 231.480833333,
    523, 208.33275, 231.480833333,
    523, 312.499125, 347.22125,
    523, 104.166375, 115.740416667,
    523, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 104.166375, 115.740416667,
    493, 104.166375, 115.740416667,
    493, 208.33275, 231.480833333,
    440, 208.33275, 231.480833333,
    440, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    440, 416.6655, 462.961666667,
    587, 416.6655, 462.961666667,
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 416.6655, 462.961666667,
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 416.6655, 462.961666667,
    493, 208.33275, 231.480833333,
    587, 208.33275, 231.480833333,
    391, 312.499125, 347.22125,
    440, 104.166375, 115.740416667,
    493, 833.331, 925.923333333,
    523, 208.33275, 231.480833333,
    523, 208.33275, 231.480833333,
    523, 312.499125, 347.22125,
    523, 104.166375, 115.740416667,
    523, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 208.33275, 231.480833333,
    493, 104.166375, 115.740416667,
    493, 104.166375, 115.740416667,
    587, 208.33275, 231.480833333,
    587, 208.33275, 231.480833333,
    523, 208.33275, 231.480833333,
    440, 208.33275, 231.480833333,
    391, 208.33275, 231.480833333,
    587, 208.33275, 231.480833333,
    783, 208.33275, 231.480833333,
};

// Rocking around the XMas Tree
// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_ROCKING_AROUND    (ARRAY_SIZE(notes_rocking_around) / 3)

const float notes_rocking_around[] = {
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    391, 150.0, 166.666666667 + 41.6666666667,
    440, 450.0, 500.0 + 125.0,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 150.0, 166.666666667 + 41.6666666667,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    349, 300.0, 333.333333333 + 83.3333333333,
    293, 150.0, 166.666666667 + 41.6666666667,
    246, 1350.0, 1500.0 + 375.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 150.0, 166.666666667 + 41.6666666667,
    493, 450.0, 500.0 + 125.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    415, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    349, 300.0, 333.333333333 + 83.3333333333,
    329, 1200.0, 1333.33333333 + 333.333333333,
    391, 75.0, 83.3333333333 + 125.0,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    391, 150.0, 166.666666667 + 41.6666666667,
    440, 450.0, 500.0 + 125.0,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 150.0, 166.666666667 + 41.6666666667,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    349, 300.0, 333.333333333 + 83.3333333333,
    293, 150.0, 166.666666667 + 41.6666666667,
    246, 1350.0, 1500.0 + 375.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 150.0, 166.666666667 + 41.6666666667,
    493, 450.0, 500.0 + 125.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    415, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    246, 300.0, 333.333333333 + 83.3333333333,
    261, 1200.0, 1333.33333333 + 333.333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    415, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    415, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    261, 300.0, 333.333333333 + 83.3333333333,
    349, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    329, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    493, 1200.0, 1333.33333333 + 333.333333333,
    523, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    523, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    523, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    523, 300.0, 333.333333333 + 83.3333333333,
    587, 171.875, 190.972222222 + 434.027777778,
    523, 150.0, 166.666666667 + 41.6666666667,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    391, 300.0, 333.333333333 + 83.3333333333,
    391, 150.0, 166.666666667 + 41.6666666667,
    440, 450.0, 500.0 + 125.0,
    391, 150.0, 166.666666667 + 41.6666666667,
    391, 150.0, 166.666666667 + 41.6666666667,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    349, 300.0, 333.333333333 + 83.3333333333,
    293, 150.0, 166.666666667 + 41.6666666667,
    246, 1350.0, 1500.0 + 375.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    440, 150.0, 166.666666667 + 41.6666666667,
    493, 450.0, 500.0 + 125.0,
    440, 150.0, 166.666666667 + 41.6666666667,
    440, 150.0, 166.666666667 + 41.6666666667,
    391, 300.0, 333.333333333 + 83.3333333333,
    415, 300.0, 333.333333333 + 83.3333333333,
    440, 300.0, 333.333333333 + 83.3333333333,
    493, 300.0, 333.333333333 + 83.3333333333,
    523, 1109.375, 1232.63888889 + 434.027777778,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 440, 450.0, 500.0 + 125.0,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 349, 300.0, 333.333333333 + 83.3333333333,
    // 293, 150.0, 166.666666667 + 41.6666666667,
    // 246, 1350.0, 1500.0 + 375.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 493, 450.0, 500.0 + 125.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 415, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 349, 300.0, 333.333333333 + 83.3333333333,
    // 329, 1200.0, 1333.33333333 + 333.333333333,
    // 391, 75.0, 83.3333333333 + 125.0,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 440, 450.0, 500.0 + 125.0,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 349, 300.0, 333.333333333 + 83.3333333333,
    // 293, 150.0, 166.666666667 + 41.6666666667,
    // 246, 1350.0, 1500.0 + 375.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 493, 450.0, 500.0 + 125.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 415, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 246, 300.0, 333.333333333 + 83.3333333333,
    // 261, 1200.0, 1333.33333333 + 333.333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 415, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 415, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 261, 300.0, 333.333333333 + 83.3333333333,
    // 349, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 329, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 493, 1200.0, 1333.33333333 + 333.333333333,
    // 523, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 523, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 523, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 523, 300.0, 333.333333333 + 83.3333333333,
    // 587, 171.875, 190.972222222 + 434.027777778,
    // 523, 150.0, 166.666666667 + 41.6666666667,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 391, 300.0, 333.333333333 + 83.3333333333,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 440, 450.0, 500.0 + 125.0,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 391, 150.0, 166.666666667 + 41.6666666667,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 349, 300.0, 333.333333333 + 83.3333333333,
    // 293, 150.0, 166.666666667 + 41.6666666667,
    // 246, 1350.0, 1500.0 + 375.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 493, 300.0, 333.333333333 + 83.3333333333,
    // 440, 300.0, 333.333333333 + 83.3333333333,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 493, 450.0, 500.0 + 125.0,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    // 440, 150.0, 166.666666667 + 41.6666666667,
    391, 359.375, 399.305555556 + 434.027777778,
    415, 359.375, 399.305555556 + 434.027777778,
    440, 359.375, 399.305555556 + 434.027777778,
    493, 359.375, 399.305555556 + 434.027777778,
    523, 2400.0, 2666.66666667
};


// Carol of the Bells
// Divided by 3 due to song format (Note, Duration, Delay)
#define NOTE_COUNT_CAROL_OF_THE_BELLS   (ARRAY_SIZE(notes_carol_of_the_bells) / 3)

const float notes_carol_of_the_bells[] = {
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    880, 274.38975, 304.8775,
    880, 137.194875, 152.43875,
    783, 137.194875, 152.43875,
    698, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    659, 137.194875, 152.43875,
    698, 137.194875, 152.43875,
    659, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    587, 137.194875, 152.43875,
    659, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    391, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    329, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    391, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    698, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    659, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    698, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    659, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    293, 137.194875, 152.43875,
    329, 137.194875, 152.43875,
    329, 274.38975, 304.8775,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    391, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    329, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    391, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    440, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    493, 137.194875, 152.43875,
    587, 137.194875, 152.43875,
    523, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    783, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    1046, 274.38975, 304.8775,
    987, 137.194875, 152.43875,
    1046, 137.194875, 152.43875,
    880, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 137.194875, 152.43875,
    523, 137.194875, 152.43875,
    440, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    329, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    329, 274.38975, 304.8775,
    523, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    493, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    440, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    391, 274.38975, 304.8775,
    349, 274.38975, 304.8775,
    329, 274.38975, 304.8775
};

/*
 *
 *      Xmas Songs
 *
 */

// Returns if the song was finished playing or not
bool playToneDelaySong(const int noteCount, const float *const p_song)
{
    bool song_was_finished = false;
    for (int i = 0; i < noteCount * 3; i += 3) {
        if (changeSong)
            return song_was_finished;

        tone(PIN_BUZZER, p_song[i], p_song[i+1]);
        delay(p_song[i+2]);
    }

    if (!repeatSong)
        nextSong();

    song_was_finished = true;
    return song_was_finished;
}


bool playJoyToTheWorld()
{
    return (playToneDelaySong(NOTE_COUNT_JOYTOTHEWORLD, notes_joyToTheWorld));
}

bool playWeWishYouAMerryXmas()
{
    return (playToneDelaySong(NOTE_COUNT_WEWISHYOUAMERRYXMAS, notes_weWishYouAMerryXmas));
}

bool playRudolfTheRedNosedReindeer()
{
    return (playToneDelaySong(NOTE_COUNT_RUDOLFTHEREDNOSEDREINDEER, notes_rudolfTheRedNosedReindeer));
}

bool playJingleBells()
{
    return (playToneDelaySong(NOTE_COUNT_JINGLEBELLS, notes_jingleBells));
}

bool playRockingAround()
{
    return (playToneDelaySong(NOTE_COUNT_ROCKING_AROUND, notes_rocking_around));
}

bool playCarolOfTheBells()
{
    return (playToneDelaySong(NOTE_COUNT_CAROL_OF_THE_BELLS, notes_carol_of_the_bells));
}

// Returns if the song was done playing or not
bool playSilentNight()
{
    bool song_was_finished = false;
    int noteCount = NOTE_COUNT_SILENTNIGHT;

    for (int i = 0; i < noteCount * 2; i += 2) {
        if (changeSong)
            return song_was_finished;

        tone(PIN_BUZZER, notes_silentNight[i], notes_silentNight[i+1]);
        delay(notes_silentNight[i+1] * 1.3);
    }

    if (!repeatSong)
        nextSong();

    song_was_finished = true;
    return song_was_finished;

}
